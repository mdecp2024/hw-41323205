<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="http://github.com/mdecp2024/hw-41323205">http://github.com/mdecp2024/hw-41323205</a></p>
<p>個人網站:<a href="http://mdecp2024.github.io/hw-41323205">http://mdecp2024.github.io/hw-41323205</a></p>
<p></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p>以下影片說明如何作業網站加入Bython頁面，同時練習print與for 迴圈的用法</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_H0aOMg5JBc" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ej9k9o5-dUw" width="560"></iframe></p>
<p></p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h3>w10</h3>
<p></p>
<p>題目一:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SyLfrIMzEu0" width="560"></iframe></p>
<p></p>
<p>題目二:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4Im1kvOmOh8" width="560"></iframe></p>
<p></p>
<p></p>
<p>題目三:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Q1Av7i1oay8" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1kztJks-29o" width="560"></iframe></p>
<p></p>
<p>上下兩題的雖然是不同的題目，但解法是一樣的。</p>
<p>將數字變成代號再將其帶入公式運算，做法就如影片三之一中的 a = (v*v - v0_ms*v0_ms)/(2*x_minus_x0) 一樣</p>
<p><span></span></p>
<p><br/><br/><br/></p>
<p></p>
<h3>w11_hw</h3>
<p></p>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/f4c20be2139a4ff703eb8718c5405765/raw/f2b16ed2a5a6b88f3fa715558564a2def5d36b32/hw1-1.py">第一題解</a></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/9cce853619178c778a79654436abc4b5/raw/8256dc62dd27d76aef6eaaa793f7b995f4637349/hw2.py">第二題解</a></p>
<p></p>
<p><span>3. 完成上列題目後, 請利用 Youtube 影片</span><span>簡報</span><span>個人的解題過程與心得.</span></p>
<p><span mce-data-marked="1"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0SQXmvlx-jA" width="560"></iframe></span></p>
<p><span mce-data-marked="1"></span></p>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/419843100d36f3b2bd2c77a0e1f2e1e6/raw/86596385a4b6ad6ddcb7b50acc9e0114067c76b2/hw1.py">課程隨堂練習</a></p>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/5d7afcc6e89a5a0c267fd6c577f0ef3b/raw/7b8509411440f65f891190d0dce552a86f7a634d/%25E9%259A%258B%25E5%25A0%2582.py">圖框</a></p><h3>w12_hw</h3>
<p></p>
<p>題目一：input與print運用</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">input("What's your name?")</pre>
<p><span>input為輸入()中為問題，</span>該程式在使用者回答完答案後會回到原預設值</p>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/d0e22704ac6a52a5e56071a643e4b0df/raw/985e4132cd8be8911a6cb02f130b02b7c649aa2f/w12%2520hw%25201-1">程式示範</a></p>
<p></p>
<p><span>print為打印的指令,如果用以下內容去執行出來會出現一隻小貓</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print (" /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("  / \    ")
print (" (___)___")</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/b649f8315da30f2fff878922680062fb/raw/db1b8f61f85242e98f237f9189965e7399991236/w12%2520hw%25201-2">程式示範</a></p>
<p></p>
<p>題目二：承上題的運用</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name?")
favorite_food = input ("What is your favorite food?")

print ("Hi! My name is " + name)
print ("My favorite food is " + favorite_food) 
print (name + "'s favorite food is " + favorite_food)</pre>
<p>將name與favorite_food變為代數且可填入，使用在執行後回答問題，便會通過print變成一句話呈現</p>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/0eda39d6db35b1c4862d556c76824cae/raw/c149bb8595bf1275a030e3a6be34b386dd906427/w12%2520hw%25202">程式示範</a></p>
<p></p>
<p>題目三：書店</p>
<p><span>使用if判斷式判斷使用者輸入之數值(文字)是否在字串</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"] #在programming_books變數裡面有3個字串
print (programming_books) #列印programming_books變數(會出現三個字串)
wanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值
print (wanted_book) #列印wanted_book變數
if wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中
    print ("Yes, we sell it!")       #列印 是的我們有販賣
else:                            #反之    
    print ("Sorry, we don't sell that book") #列印 抱歉我們沒有販賣</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/ab40438c68ff4efae4ae40b649a0c00e/raw/f8644ed4a9ff84cc5678b213136c66b128109485/w12%2520hw3">程式示範</a></p>
<p></p>
<p>題目四：購物清單</p>
<p><span>使用append()進行加入接著使用remove()移除清單內無需購買之物品</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串
print (shopping_list) #列印shopping_list變數
new_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值
 
if new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式
    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list
    print (shopping_list) #列印shopping_list字串
else:                    #反之
    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單
    print (shopping_list) #列印購物清單
#以下是移除物品的程式
item_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)
 
if item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行
    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)
    print (shopping_list) #列印購物清單
else:                     #反之
    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)
    print (shopping_list) #列印購物清單</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/ee46007f0830427f735b50041d62c4f7/raw/a6de4efebcef556eec34b7ea88172220dc5c4df8/w12%2520hw%25204">程式示範</a></p>
<p></p>
<p>題目五：菜單</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"
side_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個
print (side_dish_index) #列印side_dish_index  列印他在第幾位
todays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉
print (todays_menu) #列印今日菜單
todays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條
print (todays_menu) #列印今日菜單</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/293139f2dc4145def5f7a1f8ec13b558/raw/12f5568cc8545e87f8f37b4fa4f93321ac0e8657/w12%2520hw%25205">程式示範</a></p>
<p></p>
<p>題目六：cities儲存文字</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] #目標城市 從左到右分別是0,1,2,3,4
print (cities) #打印上面所列城市
print (cities[1])  #打印Prague
print (cities[1:4]) #打印Prague到Tokyo
print (cities[1:4:2]) #僅打印Pragut與Tokyo
print (cities[0:3])
print (cities[:3])
print (cities[2:5])
print (cities[2:])
print (cities[0:5:2])
print (cities[::2])
print (cities[4])
print (cities[-1])
print (cities[-4:-1])
cities[3:0:-1]</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/6f109fbe29d12150256e962aead1041d/raw/1bef736170228891abd9db7293db98e066ddb1cc/w12%2520hw%25206">程式示範</a></p>
<p></p>
<p>題目七：使用切片更改、新增和刪除清單元素</p>
<p>感官</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">senses = ["eyes", "nose", "ears", "tongue", "skin"]
print (senses)

senses[1] = "smell" #將“鼻子”替換為“氣味”
print (senses)

senses[3:5] = ["taste", "touch"] #將“舌頭”和“皮膚”替換為“味道”和“觸摸”
print (senses)

senses[0:3:2] = ["sight", "hearing"] #將“眼睛”和“耳朵”替換為“視覺”和“聽覺”
print (senses)</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/d5b177bd7e736290a61f2d8a4d5f6d25/raw/20e8adb66e2948e5d4bb1d3b0c806fea6611f043/w12%2520hw7">程式示範</a></p>
<p></p>
<p>行星</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">planets = ["Mercury", "Mars", "Earth", "Neptune"]
print (planets)

planets = planets + ["Jupiter"] #添加Jupiter
print (planets)

planets = planets[0:2] + ["Venus"] + planets[2:5] #在「火星」和「地球」之間加上「金星」
print (planets)

planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:] #在「海王星」和「木星」之間加上「天王星」和「土星」
print(planets)</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/8b29a50d6346984ba693f2d638c8f53e/raw/6e8e39e92fe2f8f3c5aeec69fc6baa59f0b609a9/w12%2520hw%25207">程式示範</a></p>
<p></p>
<p>房子</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print (house)

del house[1] #刪除“餐廳”
print (house)

del house[4:6] #刪除“花園”和“陽台”
print (house)

del house[::2] #刪除「廚房」、「臥室」和「露台」
print (house)

del house #刪除“房子”
print (house)</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/ce397208b6d7e5fe7da65665ebba1417/raw/1b506b9ef4ffea19596fdcf07b7d3b88c86febbb/w12%2520hw%25207">程式示範</a></p>
<p></p>
<p>題目八：for ... in range() / <span>對於...在範圍內（）</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#以下是我的朋友名單和他們最喜歡的菜餚清單

friends = ["Geetha", "Luca", "Daisy", "Juhan"]
dishes  = ["sushi", "burgers", "tacos", "pizza"]

#這些都是我的朋友

print ("My friends' names are:")
print (friends)

#這些是我的朋友

for index in range (0,4):
    print ("index:  " + str(index))
    print ("friend: " + friends[index])
    
#這些都是他們最喜歡的菜

print ("Their favorite dishes are:")
print (dishes)

#這些是他們最喜歡的菜餚

for index in range (0,4):
    print ("index:  " + str(index))
    print ("dish: " + dishes[index])
    
#這些是我的朋友們，列出了他們最喜歡的菜餚

for index in range (0,4):
    print ("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/b709fd030b28e06473b3857f78b1ece7/raw/a8da3e2c2603a509defc27fe97c6deb83281f3db/w12%2520hw%25208">程式示範</a></p>
<p></p>
<p>題目九：For loop with if... == ... / else</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">animals = ["giraffe", "penguin", "dolphin"] #[‘長頸鹿’、‘企鵝’、‘海豚’]
print (animals)

# for each position in the list
for i in range (0, len(animals)):
    print ("-- Beginning of loop --")
    # print each element and its position
    print ("The element in position " + str(i) + " is " + animals[i])
    
    wanted_to_see = "penguin"  #你真的很想看企鵝
    
    # for each position in the list
for i in range (0, len(animals)):
    # if the current animal is what you really wanted to see
    if animals[i] == wanted_to_see:
        # print out that that's the animal you really wanted to see
        print ("I saw a " + animals[i] + " and I really wanted to see it!")
    # if the current animal is not what you really wanted to see
    else:
        # just print out that you saw it
        print ("I saw a " + animals[i])</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/e7ffa40ab164aa3d9e5d09f845942bd5/raw/715503833dd7852966b2ffcdf0818b72a8ed1079/w12%2520hw%25209">程式示範</a></p>
<p></p>
<p>題目十：For loop for searching / 用於搜尋的 For 迴圈</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#誰沒有一個凌亂的抽屜？這是我們的！它包含一些配件
accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
print (accessories)

#將所有配件一一列印出來，以及它們在清單中的位置。使用類似元素 x 位於位置 y 的句子
# for each position in the list
for i in range (len(accessories)):
    #print each elements and its position
    print ("The element "  + accessories[i] + " is in position " + str(i))
    
    #列印名稱由6個字元組成的配件及其在清單中的位置。使用這樣的句子：元素 x 位於位置 y 並且它有 n 個字元
    # for each position in the list
for i in range (len(accessories)):
    # if the length of the element equals 6
    if len(accessories[i]) == 6:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
        
        #列印名稱少於6個字元的配件
        # for each position in the list
for i in range (len(accessories)):
    # if the length of the element is less than 6
    if len(accessories[i]) &lt; 6:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")
        
        #列印名稱超過6個字元的配件。另外，將 6 賦給一個變數
        # defining the threshold
n_of_characters = 6 
# for each position in the list 
for i in range (len(accessories)):
    # if the length of the element is greater than the threshold
    if len(accessories[i]) &gt; n_of_characters:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")
        
        #列印名稱由非6個字元組成的配件
        # defining the threshold
n_of_characters = 6 
# for each position in the list 
for i in range (len(accessories)):
    # if the length of the element is not equal to the threshold
    if len(accessories[i]) != n_of_characters:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))
        
        #列印位置小於等於2的配件
        # defining the threshold
position = 2 
# for each position in the list 
for i in range (len(accessories)):
    # if the position of the element is less then or equal to to the threshold
    if i &lt;= position:
        # print the element, its position, and its position characteristic
        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))
        
        #列印位置至少為2的配件
        # defining the threshold
position = 2 
# for each position in the list 
for i in range (len(accessories)):
    # if the position of the element is greater then or equal to to the threshold
    if i &gt;= position:
        # print the element, its position, and its position characteristic
        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/20ff4b9746dee4286ffe639f9d7a6b47/raw/f3250249ec5ca65baa71205ab406e8604b883c84/w12%2520hw%252010">程式示範</a></p><h3>w13_hw</h3>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/f81c3349e07dfcfbdb08063837cb908f/raw/2fae23a8c9fcecef6d8f89bf64cc74935bafb421/%25E7%2584%25A1%25E7%25B6%25B2%25E6%25A0%25BC%25E6%2596%25B9%25E6%25A1%2586.py">兩個方框</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400, height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 200

# gs*tc = canvas width and height

ctx = canvas.getContext("2d")

width = 1
height = 1

'''
'''

for i in range(width):
    for j in range(height):
       #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")
       ctx.lineWidth = 1
       ctx.strokeStyle = 'red'
       ctx.beginPath();
       ctx.rect(0,0,200,200, gs) #繪製第一個正方形
       ctx.rect(100,100,200,200, gs) #繪製第二個正方形
       ctx.stroke();</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/4c88348eb9568e3969affbfacb35cb80/raw/330fbad4b23a23c12fc011dffd1015fcc6d165e0/%25E5%2585%25A9%25E5%2580%258B%25E6%2596%25B9%25E6%25A1%2586%25E5%258F%258A%25E5%25A4%2596%25E5%2588%2587%25E5%259C%2593.py"><br/>含外切圓的方框<br/></a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200) #第一個正方形
ctx.rect(200, 200, 200, 200) #第二個正方形
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14) #(X座標,Y座標,半徑,起始角度,圓弧結束的角度)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)#(X座標,Y座標,半徑,起始角度,圓弧結束的角度)
ctx.stroke()</pre>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/4c88348eb9568e3969affbfacb35cb80/raw/330fbad4b23a23c12fc011dffd1015fcc6d165e0/%25E5%2585%25A9%25E5%2580%258B%25E6%2596%25B9%25E6%25A1%2586%25E5%258F%258A%25E5%25A4%2596%25E5%2588%2587%25E5%259C%2593.py"><br/><br/></a></p>
<h3>w14_ex</h3>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/733d1e4a589a5f4a4cface5c51b83f45/raw/2472e903fe42a62e8e99df7ec42c00c76531fef8/3%25E5%2580%258B%25E8%25AE%258A%25E8%2589%25B2%25E5%259C%2593">三個變色圓</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=600, canvas_height=600, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
    
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(600, 600)
    
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲
    color_dict = {}

    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            
            if in_circle1 and in_circle2 and in_circle3:
                # 三個圓的交集區域
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                # 圓1和圓2的交集區域
                if "intersection_1_2" not in color_dict:
                    color_dict["intersection_1_2"] = random_color_generator()
                current_color = color_dict["intersection_1_2"]
            elif in_circle1 and in_circle3:
                # 圓1和圓3的交集區域
                if "intersection_1_3" not in color_dict:
                    color_dict["intersection_1_3"] = random_color_generator()
                current_color = color_dict["intersection_1_3"]
            elif in_circle2 and in_circle3:
                # 圓2和圓3的交集區域
                if "intersection_2_3" not in color_dict:
                    color_dict["intersection_2_3"] = random_color_generator()
                current_color = color_dict["intersection_2_3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在任何圓內，畫外區域
                current_color = "white"  # 背景色白色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 250, 100  # 圓3：圓心 (200, 250)，半徑 125

# 呼叫畫圓函式
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</pre>
<p></p><h3>w15</h3>
<p></p>
<p>隨堂一:<a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/2cfebfedbbd96cd0c3a0a64b56c1ce2a/raw/3efddd45b5a265e18735269558421bfaa6f8483e/%25E9%259A%258B%25E5%25A0%2582.py">從 1 累加到 100</a></p>
<p></p>
<p>隨堂二:<a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/6005577e2bb78e255362db0f66ba42ad/raw/1dfa7fe3f3773e904bd7a633598a30deb49c8a8c/%25E9%259A%258B%25E5%25A0%25822.py">addto(1,100)</a></p><h1>HW 2</h1>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; d3c69b043ceec42d4713b93ddcbbe13288908d1a</p>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/79fbcd824e9366dc4856c97301bdd526/raw/56f3b7270305f01aefeefdec003df884f676c1be/w16%2520Exam%25201">題目一</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9NUk8mUNCBU" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
 
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
 
setup_canvas()

# Set up canvas
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")

# Set origin (32, 17)
origin_x, origin_y = 32, 5    #自己學號 修改

# Draw X-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y + 15)
ctx.lineTo(500 , origin_y + 15)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()

# Draw Y-axis
ctx.beginPath()
ctx.moveTo(origin_x , origin_y + 15)
ctx.lineTo(origin_x, 300)
ctx.stroke()

# Label origin
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 5)", origin_x + 5, origin_y + 10)

# Draw shapes
# Adjusted placement to fix alignment issue

# Hexagon (Orange)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()

# Diamond (Teal)
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "teal"
ctx.fill()

# Triangle (Teal)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()

# Circle (Pink)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()

# Square (Yellow)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "yellow"
ctx.fill()

# Rectangle (Blue)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "Blue"
ctx.fill()</pre>
<p></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for i in range(1, 6):  # 控制行数，从第1行到第5行
    for j in range(5 - i):  # 打印空格，每行的空格数逐渐减少
        print(" ", end="")
    for k in range(2 * i - 1):  # 打印星号，每行的星号数逐渐增加
        print("*", end="")
    print()  # 换行</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    *
   ***
  *****
 *******
*********</pre>
<p><br/><br/><br/></p>
<p></p>
<p><br/><br/></p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/de87fb9bb00d21407ec0c4066de1f78a/raw/2fb427b3705453d7e40abf05e53fe150d3d0b77f/w16%2520Exam%25202">題目二</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/j1P8liiwGCY" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math


def draw_maze(angle_degrees):
    # 创建和添加画布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas

    # 获取绘图上下文
    ctx = canvas.getContext("2d")

    # 设置绘图参数
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 5 * 10
    # 整体向右移动的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)

    # 定义迷宫线条
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]

    # 旋转并绘制迷宫线条
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]

        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()

    return ctx, offset_x + move_right_offset, offset_y


def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋转后的文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 05)", 10, - 15)
    ctx.restore()


if __name__ == "__main__":
    # 调整迷宫角度，这里设置为30度，可以根据需要修改
    maze_angle = 0
    # 文本角度
    text_angle = 0
    ctx, offset_x, offset_y = draw_maze(maze_angle)
    label_coordinate(ctx, offset_x, offset_y, text_angle)</pre>
<p></p><h3>w8</h3>
<p></p>
<p>操作步驟:</p>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
</ol>
<p> <img alt="" height="231" src="/images/螢幕擷取畫面 2024-10-16 120334.png" width="412"/></p>
<p></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-41323205/content/Brython.html?src=https://gist.githubusercontent.com/41323205/736f6b7e1a17aebe0fda2c0d9ffa7b1c/raw/6aa58bdb27b896017571539088ae4619153af174/w16%2520Exam%25203">題目三</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Z0EFce7fWD0" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math


def draw_maze(angle_degrees):
    # 创建和添加画布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas

    # 获取绘图上下文
    ctx = canvas.getContext("2d")

    # 设置绘图参数
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 5 * 10
    # 整体向右移动的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)

    # 定义迷宫线条
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]

    # 旋转并绘制迷宫线条
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]

        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()

    return ctx, offset_x + move_right_offset, offset_y, pixel_scale


def find_path():
    # 简单的路径示例，这里假设的路径，实际需要更复杂的算法
    # 为了维持原本迷宫路线，这里路径假设不破坏迷宫已有路线
    path = [
        ((1.5, 0), (1.5, 0.5)),
        ((1.5, 0.5), (4.5, 0.5)),
        ((4.5, 0.5), (4.5, 2.5)),
        ((4.5, 2.5), (3.5, 2.5)),
        ((3.5, 2.5), (3.5, 1.5)),
        ((3.5, 1.5), (2.5, 1.5)),
        ((2.5, 1.5), (2.5, 2.5)),
        ((2.5, 2.5), (1.5, 2.5)),
        ((1.5, 2.5), (1.5, 3.5)),
        ((1.5, 3.5), (3.5, 3.5)),
        ((3.5, 3.5), (3.5, 4.5)),
        ((3.5, 4.5), (2.5, 4.5)),
        ((2.5, 4.5), (2.5, 5))
    ]
    return path


def draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):
    angle_radians = math.radians(angle_degrees)
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    for line in path:
        start = line[0]
        end = line[1]

        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()


def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋转后的文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 05)", 10, - 15)
    ctx.restore()


if __name__ == "__main__":
    # 调整迷宫角度，这里设置为30度，可以根据需要修改
    maze_angle = 0
    # 文本角度
    text_angle = 0
    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)
    path = find_path()
    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)
    label_coordinate(ctx, offset_x, offset_y, text_angle)</pre>
<p></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p style="padding-left: 30px;"></p>
<p></p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>